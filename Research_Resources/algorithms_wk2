# Path to go from one city to another

# Tree Search algorithm.
function tree-search(initialState, goalTest)
    returns SUCCESS or FAILURE

    INITIALIZE FRONTIER WITH initialState

    WHILE NOT FRONTIER.isEMPTY():
        STATE =FRONTIER.REMOVE()

        IF GOALTEST(STATE):
            RETURN SUCCESS(STATE)

        FOR NEIGHBOR IN STATE.NEIGHBORS():
        FRONTIER.ADD(NEIGHBOR)

    RETURN FAILURE


# Graph search algorithm

function graph-search(initialState, goalTest)
    returns SUCCESS or FAILURE

    INITIALIZE FRONTIER WITH initialState
    explored = Set.new()

    WHILE NOT FRONTIER.isEMPTY():
        state = frontier.REMOVE()
        explored.add()

        IF GOALTEST(STATE):
            RETURN SUCCESS(STATE)

        FOR NEIGHBOR IN STATE.NEIGHBORS():
            if neighbor not in frontier union explored:
                FRONTIER.ADD(NEIGHBOR)

    RETURN FAILURE


# Breadth first search
function BREADTH-FIRST-SEARCH(initialState, goalTest)
  returns SUCCESS or FAILURE:

  frontier = Queue.new(initialState)
  explored = Set.new()

  while not frontier.isEmpty():
    state = frontier.dequeue()
    explored.add(state)

    if goalTest(state):
      return SUCCESS(state)

    for neighbor in state.neighbors():
      if neighbor not in frontier union explored:
        frontier.enqueue(state)

  return FAILURE


# Depth-First Search
function DEPTH-FIRST-SEARCH(initialState, goalTest)
  returns SUCCESS or FAILURE:

  frontier = Stack.new(initialState)
  explored = Set.new()

  while not frontier.isEmpty():
    state = frontier.pop()
    explored.add(state)

    if goalTest(state):
      return SUCCESS(state)

    for neighbor in state.neighbors():
      if neighbor not in frontier union explored:
        frontier.push(state)

  return FAILURE
